Problem:
Given a string s and a string t, check if s is subsequence of t.

You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (<=100).

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).

Example 1:
s = "abc", t = "ahbgdc"

Return true.

Example 2:
s = "axc", t = "ahbgdc"

Return false.


Tags: [Two Pointers] [Greedy]


Solution:
// Two pointers
public boolean isSubsequence(String s, String t)
	{
		if (s.length() == 0) return true;
		
		int indexs = 0, indext = 0;
		
		while (indext < t.length()){
			if (s.charAt(indexs) == t.charAt(indext)){
				indexs++;
				if (indexs == s.length()){
					return true;
				}
			}
			indext++;
		}
		
		return false;
	}

// Greedy
public boolean isSubsequence(String s, String t) 
    {
        if(t.length() < s.length()) return false;
        int prev = 0;
        for(int i = 0; i < s.length();i++)
        {
            char tempChar = s.charAt(i);
            prev = t.indexOf(tempChar,prev);
            if(prev == -1) return false;
            prev++;
        }
        return true;
    }