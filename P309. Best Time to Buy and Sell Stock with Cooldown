Problem:
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share 
of the stock multiple times) with the following restrictions:

You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
Example:

prices = [1, 2, 3, 0, 2]
maxProfit = 3
transactions = [buy, sell, cooldown, buy, sell]

Tags: [Dynamic Programming]

Solution:
public int MaxProfit(int[] prices) {
      if (prices == null || prices.Length < 2) return 0;
      int[] buy = new int[prices.Length];
			int[] sell = new int[prices.Length];
			buy[0] = 0 - prices[0];
			buy[1] = Math.Max(0 - prices[0], 0 - prices[1]);
			sell[0] = 0;
			sell[1] = Math.Max(prices[1] - prices[0], 0);
			for (int i = 2; i < prices.Length; i++)
			{
				buy[i] = Math.Max(buy[i - 1], sell[i - 2] - prices[i]);
				sell[i] = Math.Max(sell[i - 1], buy[i - 1] + prices[i]);
			}

			return sell[prices.Length - 1];
    }
    
Explanation:
buy[i]记录第i天时最后一次操作是buy的最大利润
sell[i]记录第i天时最后一次操作是sell的最大利润
递推关系：
buy[i] = Math.Max(buy[i - 1], sell[i - 2] - prices[i]);
sell[i] = Math.Max(sell[i - 1], buy[i - 1] + prices[i]);
