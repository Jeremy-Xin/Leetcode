Problem:
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].

Tags: [Tree] [Breadth first search]

Solution: [c#]
public IList<int> RightSideView(TreeNode root) {
        List<int> result = new List<int>();
			Queue<TreeNode> queue = new Queue<TreeNode>();
			if (root == null) return result;
			queue.Enqueue(root);
			while (queue.Count > 0)
			{
				int count = queue.Count;
				for (int i = 0; i < count; i++)
				{
					var node = queue.Dequeue();
					if (i == 0) result.Add(node.val);
					if (node.right != null)
					{
						queue.Enqueue(node.right);
					}
					if (node.left != null)
					{
						queue.Enqueue(node.left);
					}
				}
			}
			return result;
    }
    
Explanation:
广搜
