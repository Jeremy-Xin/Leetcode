Problem:
Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters.
You may assume that each word will contain only lower case letters. If no such two words exist, return 0.



Solution:
public int MaxProduct(string[] words) {
        int[] values = new int[words.Length];
			for (int i = 0; i < words.Length; i++)
			{
				for (int j = 0; j < words[i].Length; j++)
				{
					values[i] |= 1 << (words[i][j] - 'a');
				}
			}
			int max = 0;
			for (int i = 0; i < words.Length - 1; i++)
			{
				for (int j = i + 1; j < words.Length; j++)
				{
					if ((values[i] & values[j]) == 0 && words[i].Length * words[j].Length > max)
					{
						max = words[i].Length * words[j].Length;
					}
				}
			}
			return max;
    }
