Problem:
Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers 
and operators. The valid operators are +, - and *.


Example 1
Input: "2-1-1".

((2-1)-1) = 0
(2-(1-1)) = 2
Output: [0, 2]


Example 2
Input: "2*3-4*5"

(2*(3-(4*5))) = -34
((2*3)-(4*5)) = -14
((2*(3-4))*5) = -10
(2*((3-4)*5)) = -10
(((2*3)-4)*5) = 10
Output: [-34, -14, -10, -10, 10]

Tags: [Divide and Conquer]

Solution: [c#]
public IList<int> DiffWaysToCompute(string input)
		{
			List<int> result = new List<int>();
			for (int i = 0; i < input.Length; i++)
			{
				if (input[i] == '+' || input[i] == '-' || input[i] == '*')
				{
					string part1 = input.Substring(0, i);
					string part2 = input.Substring(i + 1);
					IList<int> result1 = DiffWaysToCompute(part1);
					IList<int> result2 = DiffWaysToCompute(part2);
					foreach (var r1 in result1)
					{
						foreach (var r2 in result2)
						{
							int t = 0;
							switch (input[i])
							{
								case '+':
									t = r1 + r2;
									break;
								case '-':
									t = r1 - r2;
									break;
								case '*':
									t = r1 * r2;
									break;
							}
							result.Add(t);
						}
					}
				}
			}
			if (result.Count == 0)
			{
				result.Add(int.Parse(input));
			}
			return result;
		}
    
Explanation:
分治法
