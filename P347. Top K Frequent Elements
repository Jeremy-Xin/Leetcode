Problem:
Given a non-empty array of integers, return the k most frequent elements.

For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].

Note: 
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

Tags:[heap] [bucket sort] [hashtable]

Solution:[c#]
public IList<int> TopKFrequent(int[] nums, int k) {
      // hash table
      Hashtable ht = new Hashtable();
			foreach (int num in nums)
			{
				if (!ht.ContainsKey(num))
				{
					ht.Add(num, 1);
				}
				else
				{
					ht[num] = (int)ht[num] + 1;
				}
			}
			
			// bucket sort
			List<int>[] frequency = new List<int>[nums.Length + 1];
			foreach (var key in ht.Keys)
			{
				int f = (int)ht[key];
				if (frequency[f] == null)
				{
					frequency[f] = new List<int>();
				}
				frequency[f].Add((int)key);
			}

			List<int> result = new List<int>();
			for (int i = nums.Length; i >= 0 && result.Count < k; i--)
			{
				if (frequency[i] != null)
				{
					result.AddRange(frequency[i]);
				}
			}
			return result;
    }
